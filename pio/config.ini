[env]
custom_app_version = !git describe --dirty=+ --always
build_flags =
	-std=gnu++17
	-DCORE_DEBUG_LEVEL=0
	-DLOG_LOCAL_LEVEL=0
	-DFS_NO_GLOBALS
	-DNO_GLOBAL_EEPROM
	-DNO_GLOBAL_MDNS
	-Wl,--wrap=littlefs_api_read
	-Wl,--wrap=littlefs_api_prog
	-Wl,--wrap=littlefs_api_erase
build_src_flags =
	-Wall -Wextra -Werror -Wswitch-enum -Wno-unused-parameter
	-DAPP_NAME="\"${env.custom_app_name}\""
	!echo "-DAPP_VERSION=\\\""$(git describe --dirty=+ --always)"\\\""
build_unflags = -std=gnu++11
build_src_filter =
	+<*>
	-<.git/>
lib_ldf_mode = chain
lib_deps =
	nomis/uuid-common@^1.2.0
	nomis/uuid-log@^3.1.0
	nomis/uuid-console@^3.0.0
	ssilverman/libCBOR@^1.6.1
lib_ignore = EEPROM
board_build.filesystem = littlefs
board_build.embed_files = app/pio/certs/x509_crt_bundle
extra_scripts =
	post:app/pio/app-tls-size.py

[app:common]
# build_flags = ${env.build_flags}
# lib_deps = ${env.build_flags}
# extra_scripts = ${env.extra_scripts}

[app:native_common]
# build_flags =

[app:mcu_only]
lib_deps =
	nomis/uuid-syslog@^2.2.2
	nomis/uuid-telnet@^0.2.0

[app:d1_mini]
extends = app:common
framework = arduino
platform = espressif8266@^3.0.0
board = d1_mini
board_build.f_cpu = 160000000L
board_build.ldscript = eagle.flash.4m1m.ld
build_flags =
	${app:common.build_flags}
	-Os
	-DPIO_FRAMEWORK_ARDUINO_LWIP2_LOW_MEMORY_LOW_FLASH
	-DNDEBUG
lib_deps =
	${app:common.lib_deps}
	${app:mcu_only.lib_deps}
	ESP8266WiFi

[app:s2_mini]
extends = app:common
framework = arduino
platform = espressif32@6.10.0
board = lolin_s2_mini
board_build.f_cpu = 240000000L
board_build.flash_mode = qio
board_build.partitions = app/pio/s2_mini-app-1920K-fs-192K.csv
build_flags =
	${app:common.build_flags}
	-Os
	-DPSTR_ALIGN=1
	-DNDEBUG
lib_deps =
	${app:common.lib_deps}
	${app:mcu_only.lib_deps}
extra_scripts =
	${app:common.extra_scripts}
	pre:app/pio/esp32-crt-bundle.py
	post:app/pio/esp32-app-set-desc.py

[app:s3]
extends = app:common
framework = arduino
platform = espressif32@6.10.0
board = lolin_s3
board_build.f_cpu = 240000000L
board_build.flash_mode = qio
build_flags =
	${app:common.build_flags}
	-O2
	-DPSTR_ALIGN=1
	-DNDEBUG
lib_deps =
	${app:common.lib_deps}
	${app:mcu_only.lib_deps}
extra_scripts =
	${app:common.extra_scripts}
	pre:app/pio/esp32-crt-bundle.py
	post:app/pio/esp32-app-set-desc.py

[app:s3_lolin]
extends = app:s3
board = lolin_s3
board_build.partitions = app/pio/s3-app-4096K-fs-8064K-coredump-64K.csv
board_upload.use_1200bps_touch = false
board_upload.wait_for_upload_port = false
build_flags =
	${app:s3.build_flags}
	-DARDUINO_ANY_ESP32_S3=1

[app:s3_devkitc]
extends = app:s3
board = esp32-s3-devkitc-1
board_build.partitions = app/pio/s3-app-4096K-fs-8064K-coredump-64K.csv
build_flags =
	${app:s3.build_flags}
	-DARDUINO_ANY_ESP32_S3=1
	-DARDUINO_ESP_S3_DEVKITC=1

[app:s3_devkitm]
extends = app:s3
board = esp32-s3-devkitm-1
board_build.partitions = app/pio/s3-app-4096K-fs-8064K-coredump-64K.csv
build_flags =
	${app:s3.build_flags}
	-DARDUINO_ANY_ESP32_S3=1
	-DARDUINO_ESP_S3_DEVKITM=1

[app:native]
extends = app:common
platform = native
build_flags =
	${app:common.build_flags}
	${app:native_common.build_flags}
	-Iapp/src/native
	-DARDUINO
	-DENV_NATIVE
	-Og -ggdb
	-lpthread
lib_compat_mode = off

[app:native_test]
extends = app:native
build_flags =
	${app:native.build_flags}
	-DUNITY_INCLUDE_PRINT_FORMATTED
test_build_src = true
# Workaround for https://github.com/platformio/platformio-core/issues/4882 (can't obtain env name)
# and https://github.com/platformio/platformio-core/issues/4883 (need to delete build output)
#
# This only works if the environment is named "native_test"
test_testing_command =
	app/pio/testing-command.sh
	${platformio.build_dir}/native_test/test
	${platformio.build_dir}/native_test/program

[app:native_test_coverage]
extends = app:native_test
build_flags =
	${app:native_test.build_flags}
	-fprofile-arcs -ftest-coverage -lgcov --coverage
# Workaround for https://github.com/platformio/platformio-core/issues/4882 (can't obtain env name)
# and https://github.com/platformio/platformio-core/issues/4883 (need to delete build output)
#
# This only works if the environment is named "native_test_coverage"
test_testing_command =
	app/pio/testing-command.sh
	${platformio.build_dir}/native_test_coverage/test
	${platformio.build_dir}/native_test_coverage/program
